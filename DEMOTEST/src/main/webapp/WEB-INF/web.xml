<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
  <display-name>AutoTalk</display-name>
  <context-param><!--全局范围内环境参数初始化-->
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:/spring-mybatis.xml</param-value>
  </context-param>

  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>

  <!--以下配置的加载顺序:先 ServletContext >> context-param >> listener >> filter >> servlet >>  spring-->
  <!--如果不定义webAppRootKey参数，那么webAppRootKey就是缺省的"webapp.root"。 但最好设置，以免项目之间的名称冲突。定义以后，在Web
      Container启动时将把ROOT的绝对路径写到系统变量里。 然后log4j的配置文件里就可以用${neobabyAdmin.root }来表示Web目录的绝对路径，把log文件存放于webapp中。此参数用于后面的“Log4jConfigListener” -->

  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>DEMOTEST.root</param-value>
  </context-param>

  <!--Spring默认刷新Log4j配置文件的间隔,单位为millisecond -->


  <context-param>
    <param-name>log4jRefreshInterval</param-name>
    <param-value>6000</param-value>
  </context-param>
  <!--监听器-->
  <!--用来设定Listener接口-->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <filter>
    <!--指定filter的名字-->
    <filter-name>characterEncodingFilter</filter-name>
    <!--定义filter的类的名称-->
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--用来定义参数,若在Servlet可以使用下列方法来获得:String param_name=getServletContext().getInitParamter("param-name里面的值");-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!--用来定义filter所对应的URL-->
  <filter-mapping>
    <!--指定对应filter的名字-->
    <filter-name>characterEncodingFilter</filter-name>
    <!--指定filter所对应的URL-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>

    <servlet>
        <!--指定servlet的名称-->
        <servlet-name>spring-mvc</servlet-name>
        <!--指定servlet的类名称,这里配置了前端控制器-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--用来定义参数,可有多个init-param。在servlet类中通过getInitParamenter(String name)方法访问初始化参数    -->
        <init-param>
            <!--参数名称-->
            <param-name>contextConfigLocation</param-name>
            <!--参数值-->
            <param-value>classpath*:/spring-mvc.xml</param-value>
        </init-param>
        <!--当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet.-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--用来定义servlet所对应的URL-->
    <servlet-mapping>
        <!--指定servlet的名称-->
        <servlet-name>spring-mvc</servlet-name>
        <!--指定servlet所对应的URL-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


  <welcome-file-list><!--定义首页列单.-->
    <welcome-file>/login.jsp</welcome-file> <!--用来指定首页文件名称.我们可以用<welcome-file>指定几个首页,而服务器会依照设定的顺序来找首页.-->
  </welcome-file-list>
</web-app>
